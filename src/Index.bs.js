// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Readline$ReasonmlInPictures = require("./bindings/Readline.bs.js");

function fmap(f, m) {
  if (m) {
    return /* Just */[Curry._1(f, m[0])];
  } else {
    return /* Nothing */0;
  }
}

function apply(mf, mv) {
  if (mv && mf) {
    return /* Just */[Curry._1(mf[0], mv[0])];
  } else {
    return /* Nothing */0;
  }
}

function bind(mv, f) {
  if (mv) {
    return Curry._1(f, mv[0]);
  } else {
    return /* Nothing */0;
  }
}

var Maybe = {
  fmap: fmap,
  $less$$great: fmap,
  apply: apply,
  $less$star$great: apply,
  bind: bind,
  $great$great$eq: bind
};

fmap((function (param) {
        return 3 + param | 0;
      }), /* Just */[2]);

function make(id, title) {
  return {
          id: id,
          title: title
        };
}

function fmap$1(f, post) {
  return Curry._1(f, post);
}

function getPostTitle(post) {
  return post.title;
}

function findPost(id) {
  return {
          id: id,
          title: "Post #" + String(id)
        };
}

var Post = {
  make: make,
  fmap: fmap$1,
  $less$$great: fmap$1,
  getPostTitle: getPostTitle,
  findPost: findPost
};

findPost(1).title;

findPost(1).title;

function fmap$2(f, g, x) {
  return Curry._1(f, Curry._1(g, x));
}

var $$Function = {
  fmap: fmap$2
};

function foo(param) {
  return 3 + (2 + param | 0) | 0;
}

foo(10);

Caml_obj.caml_equal(apply(/* Just */[(function (param) {
              return 3 + param | 0;
            })], /* Just */[2]), /* Just */[5]);

function apply$1(fs, xs) {
  return List.flatten(List.map((function (f) {
                    return List.map(f, xs);
                  }), fs));
}

var MyList = {
  apply: apply$1,
  $less$star$great: apply$1
};

apply$1(/* :: */[
      (function (param) {
          return (param << 1);
        }),
      /* :: */[
        (function (param) {
            return 3 + param | 0;
          }),
        /* [] */0
      ]
    ], /* :: */[
      1,
      /* :: */[
        2,
        /* :: */[
          3,
          /* [] */0
        ]
      ]
    ]);

fmap((function (prim, prim$1) {
        return prim + prim$1 | 0;
      }), /* Just */[5]);

apply(/* Just */[(function (param) {
          return 5 + param | 0;
        })], /* Just */[5]);

var x = fmap(Caml_int32.imul, /* Just */[5]);

var y = apply(x, /* Just */[3]);

apply(fmap(Caml_int32.imul, /* Just */[5]), /* Just */[3]);

apply(fmap(Caml_int32.imul, /* Just */[5]), /* Just */[3]);

function even(x) {
  if (x <= 0) {
    return true;
  } else {
    return odd(x - 1 | 0);
  }
}

function odd(x) {
  if (x <= 0) {
    return false;
  } else {
    return even(x - 1 | 0);
  }
}

function half(x) {
  if (even(x)) {
    return /* Just */[x / 2 | 0];
  } else {
    return /* Nothing */0;
  }
}

half(3);

half(4);

bind(bind(half(20), half), half);

var $$Error = Caml_exceptions.create("Index-ReasonmlInPictures.IO.Error");

function bind$1(pa, f) {
  return pa.then(Curry.__1(f));
}

function getLine(param) {
  return new Promise((function (resolve, _reject) {
                return Readline$ReasonmlInPictures.readline((function (line) {
                              Readline$ReasonmlInPictures.close(/* () */0);
                              return resolve(line);
                            }));
              }));
}

function readFile(path) {
  return new Promise((function (resolve, reject) {
                var onRead = function (error, value) {
                  if (error == null) {
                    if (value == null) {
                      return resolve("");
                    } else {
                      return resolve(value);
                    }
                  } else {
                    return reject([
                                $$Error,
                                "Error reading file"
                              ]);
                  }
                };
                Fs.readFile(path, "utf-8", onRead);
                return /* () */0;
              }));
}

function putStrLn(value) {
  return new Promise((function (resolve, param) {
                Pervasives.print_string(value);
                return resolve(value);
              }));
}

var IO = {
  $$Error: $$Error,
  bind: bind$1,
  $great$great$eq: bind$1,
  getLine: getLine,
  readFile: readFile,
  putStrLn: putStrLn
};

var pa = getLine(/* () */0);

var pa$1 = pa.then(readFile);

pa$1.then(putStrLn);

exports.Maybe = Maybe;
exports.Post = Post;
exports.$$Function = $$Function;
exports.foo = foo;
exports.MyList = MyList;
exports.x = x;
exports.y = y;
exports.even = even;
exports.odd = odd;
exports.half = half;
exports.IO = IO;
/*  Not a pure module */
